<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Health Metrics</title>
  <link rel="stylesheet" href="/css/health-metrics.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <header id="masthead" class="site-header header-at-top">
    <div class="container site-header__container">
        <!-- Navigation Menu -->
        <div class="site-header__menu">
            <nav id="site-navigation" class="main-navigation">
                <div class="menu-primary-navigation-container">
                    <ul id="primary-menu" class="menu">
                        <li class="menu-item"><a href="/homePage">Home</a></li>
                        <li class="menu-item"><a href="/index">Find My Condition</a></li>
                        <li class="menu-item"><a href="/health-metrics">Heath Metrics</a></li>
                        <li class="menu-item"><a href="/fitnessLogs">Fitness Logs</a></li>
                        <li class="menu-item"><a href="/reminders">Reminders</a></li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>
    <div class="bg-overlay"></div> <!-- Overlay element -->
    <img src="/images/health.jpg" class="bg" alt="Background">
  <div class="container">
    <h1>Welcome, <%= username %>!</h1>
    <div class="welcome-message">
      <p><%= message.steps %></p>
      <p><%= message.weight %></p>
      <p><%= message.heartRate %></p>
    </div>
    <p>Here's your health data:</p>
    <ul>
        <li>Heart Rate: <%= user.heartRate[user.heartRate.length - 1] %> BPM</li>
        <li>Steps: <%= user.steps[user.steps.length - 1] %> steps</li>
        <li>Weight: <%= user.weight[user.weight.length - 1] %> kg</li>
    </ul>

    <h3>Average Metrics:</h3>
    <ul>
        <li>Average Heart Rate: <%= avgHeartRate.toFixed(1) %> BPM</li>
        <li>Average Steps: <%= avgSteps.toFixed(1) %> steps</li>
        <li>Average Weight: <%= avgWeight.toFixed(1) %> kg</li>
    </ul>

    <div class="metrics">
      <div class="metric">
        <h2>Weight</h2>
        <p id="weight">-- kg</p>
      </div>
      <div class="metric">
        <h2>Steps</h2>
        <p id="steps">--</p>
      </div>
      <div class="metric">
        <h2>Heart Rate</h2>
        <p id="heart-rate">-- bpm</p>
      </div>
    </div>
    <button id="add-metric-btn">Add New Metric</button>
    <div id="message" style="color: red;"></div> <!-- Message for waiting -->
    <canvas id="progress-chart"></canvas>
    <p class="final-message">Your health metrics are logged! Track your trends over time to better understand your progress.</p>
  

  <script>
    const username = "<%= username %>";
  
    // Fetch metrics and render them
    fetch(`/api/metrics/${username}`)
      .then((response) => response.json())
      .then((data) => {
        document.getElementById('weight').innerText = `${data.weight.at(-1)} kg`;
        document.getElementById('steps').innerText = `${data.steps.at(-1)}`;
        document.getElementById('heart-rate').innerText = `${data.heartRate.at(-1)} bpm`;
  
        renderChart(data);
  
        // Get the last recorded date from the metrics
        const lastDate = new Date(data.dates.at(-1)); // Last recorded date
        const today = new Date();
        const timeDiff = today - lastDate; // Time difference in milliseconds
        const timeDiffInHours = timeDiff / (1000 * 3600); // Convert milliseconds to hours
  
        const addMetricBtn = document.getElementById('add-metric-btn');
        const messageElement = document.getElementById('message');
  
        // If less than 24 hours, disable the button and show the message
        if (timeDiffInHours < 24) {
          addMetricBtn.disabled = true; // Disable the button
          messageElement.innerText = '24 hours are not up yet. Please wait before adding new metrics.';
        } else {
          messageElement.innerText = ''; // Clear message if button is enabled
        }
      });
  
    // Add new metric
    document.getElementById('add-metric-btn').addEventListener('click', () => {
      const weight = prompt('Enter your weight (kg):');
      const steps = prompt('Enter your steps:');
      const heartRate = prompt('Enter your heart rate (bpm):');
  
      fetch('/api/metrics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, weight, steps, heartRate }),
      })
        .then((response) => response.json())
        .then((data) => {
          // Show the message from the backend
          document.querySelector('.welcome-message').innerHTML = `
            <p>${data.message.steps}</p>
            <p>${data.message.weight}</p>
            <p>${data.message.heartRate}</p>
          `;
          location.reload();
        })
        .catch((error) => console.error('Error adding metric:', error));
    });
  
    // Render Chart
    function renderChart(data) {
      const ctx = document.getElementById('progress-chart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.dates.map((date) => new Date(date).toLocaleDateString()),
          datasets: [
            {
              label: 'Weight (kg)',
              data: data.weight,
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 2,
            },
            {
              label: 'Steps',
              data: data.steps,
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 2,
            },
            {
              label: 'Heart Rate (bpm)',
              data: data.heartRate,
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          scales: {
            x: { title: { display: true, text: 'Date' } },
            y: { title: { display: true, text: 'Value' } },
          },
        },
      });
    }
  </script>
  
</div> 
</body>
</html>
