<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MedSquire HomePage</title>
    <link rel="stylesheet" href="/css/homePage.css"> <!-- Link to an external CSS file -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header id="masthead" class="site-header header-at-top">
        <div class="container site-header__container">
            <!-- Logo -->
            <a href="/" class="site-branding">
                <!-- Logo here -->
            </a>
    
            <!-- Navigation Menu -->
            <div class="site-header__menu">
                <nav id="site-navigation" class="main-navigation">
                    <div class="menu-primary-navigation-container">
                        <ul id="primary-menu" class="menu">
                            <li class="menu-item"><a href="/homePage">Home</a></li>
                            <li class="menu-item"><a href="/index">Find My Condition</a></li>
                            <li class="menu-item"><a href="/health-metrics">Heath Metrics</a></li>
                            <li class="menu-item"><a href="/fitnessLogs">Fitness Logs</a></li>
                            <li class="menu-item"><a href="/reminders">Reminders</a></li>
                        </ul>
                    </div>
                </nav>
            </div>
    
            <!-- Sidebar -->
            <div class="site-header">
                <div class="site-header__container">
                    <!-- Other Header Content (Logo, Menu) -->
                    <div class="profile-icon" id="profile-icon">
                        <i class="fas fa-user-circle"></i> <!-- Font Awesome Profile Icon -->
                    </div>
                </div>
            </div>
        
            <!-- Profile Sidebar -->
            <div class="profile-sidebar" id="profile-sidebar">
                <form id="profile-form">
                    <div class="content">
                        <h1>Personal Details</h1>
                        <p>Welcome to your profile page! Here you can view and edit your personal information. Keeping this info up to date helps us in sending personalized reports for you.</p>
                    </div>
                    <label for="gmail">Gmail:</label>
<input type="text" id="gmail" name="gmail" placeholder="JohnWick@gmail.com"required value="<%= user.gmail %>"
  pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
  oninput="checkEmailFormat()">
<span id="gmail-error" style="color: red; display: none;">Please enter a valid email address.</span>

<script>
    function checkEmailFormat() {
        const emailInput = document.getElementById('gmail');
        const errorSpan = document.getElementById('gmail-error');
        
        // Check validity based on patternMismatch
        if (!emailInput.value.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.com$/)) {
            errorSpan.style.display = 'inline';  // Show error message
        } else {
            errorSpan.style.display = 'none';  // Hide error message
        }
    }
</script>

                    
<label for="phNo">Phone Number:</label>
<input type="text" id="phNo" name="phNo" 
  placeholder="Enter 10-digit phone number" required 
  value="<%= user.phNo || '' %>"
  pattern="\d{10}" 
  oninput="checkPhoneFormat()">
<span id="phNo-error" style="color: red; display: none;">Please enter a valid 10-digit phone number.</span>

<script>
    function checkPhoneFormat() {
        const phoneInput = document.getElementById('phNo');
        const errorSpan = document.getElementById('phNo-error');
        
        // Check if the phone number is exactly 10 digits
        const phoneRegex = /^\d{10}$/;

        if (!phoneRegex.test(phoneInput.value)) {
            errorSpan.style.display = 'inline'; // Show error message if invalid
        } else {
            errorSpan.style.display = 'none'; // Hide error message if valid
        }
    }
</script>




                    
                    <button type="submit">Save Changes</button><br><br>
                </form>
                <div id="custom-alert" class="custom-alert" style="display:none;">
                    <button class="close-alert" onclick="closeAlert()">×</button> <!-- Close Button -->
                    <p></p>
                    
                    <span id="alert-message"></span>
                    <!-- HTML Code -->
                <div class="bunny"><p>ִֶָ⋆.˚🦋༘⋆</p></div>
                </div>
                
                <button class="logout-button" onclick="logout()">Logout</button><br><br>

                
                <button id="close-sidebar">Close</button>


            </div>
        
           
        
            <script src="/js/profile.js"></script> <!-- Link to the profile.js file -->
        </div>
    </header>
    

    <main> 
        <section class="hero-banner">
            <div class="bg-overlay"></div> <!-- Overlay element -->
            <img src="/images/bg4.jpg" class="bg" alt="Background">
            <div class="container1">   
                <div class="content">
                    <h1 class="welcome-text">Welcome Back, <%= username %>!</h1>
                    <p class="typing-text">How are you doing today?</p>
                    <p class="grow-text"><i>Keep up the great work! Track your daily routines and stay on top of your health goals.</i></p>
                    <div class="Character">
                        <img class="Character_shadow pixelart" src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/21542/DemoRpgCharacterShadow.png" alt="Shadow" />
                        <img class="Character_spritesheet pixelart face-down" src="/images/bg5.png" alt="Character" />
                    </div>
                </div>
                
                <style>
                :root {
                   --pixel-size: 6;
                }
                
                body {
                   background: #96ffc1;
                }
                
                .Character {
                   width: calc(32px * var(--pixel-size));
                   height: 175px;
                   overflow: hidden;
                   position: relative;
                   margin:auto;
                   align-items:start;
                }
                
                .Character_spritesheet {
                   animation: moveSpritesheet 1s steps(4) infinite;
                   width: calc(128px * var(--pixel-size));
                   height: calc(128px * var(--pixel-size)); /* Ensure the height matches the sprite sheet */
                   position: absolute;
                   left: 0;
                   top: 0;
                }
                
                .Character_shadow {
                   position: absolute;
                   width: calc(32px * var(--pixel-size));
                   height: calc(32px * var(--pixel-size));
                   left: 0; /* Align shadow with character */
                   top: calc(32px * var(--pixel-size)); /* Shadow should be slightly offset below the character */
                }
                
                .pixelart {
                   image-rendering: pixelated;
                }
                
                .face-right {
                   top: calc(-32px * var(--pixel-size));
                }
                
                .face-up {
                   top: calc(-64px * var(--pixel-size));
                }
                
                .face-left {
                   top: calc(-96px * var(--pixel-size));
                }
                
                @keyframes moveSpritesheet {
                   from {
                      transform: translate3d(0px, 0, 0);
                   }
                   to {
                      transform: translate3d(-100%, 0, 0);
                   }
                }
                </style>

<style>
  /* Improved Reminders List */
  #reminders {
    list-style: none;
    padding: 0;
    display: grid;
    gap: 1rem;
  }
  
  #reminders li {
    font-family: SANS-SERIF;
    font-size: 19.5px;
    background: #4689311f;
    padding: 1.25rem;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 6px var(--shadow-color);
    transition: all var(--transition-speed);
    display: flex;
    justify-content: space-between;
    align-items: center;
    border: 1px solid rgba(99, 102, 241, 0.1);
    color: #3e0707;
  }
  
  #reminders li:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 12px var(--shadow-color);
    border-color: var(--primary-light);
  }

  .completed {
      text-decoration: line-through;
      color: gray;
    }
    .recommendations-container {
    display: flex;
    width: 100%;
    gap: 1rem;
    background: #6b96b31f;
    padding: 0rem;
    padding-right: 0px;
    padding-left: 0px;
}

.recommendations-column {
    flex: 1;
    padding: 1rem;
    border-radius: 6px;
}

/* Exercise column styling */
.recommendations-column:first-child {
    background: linear-gradient(135deg, #cfd37e, #7bff2985);
    color: #7c0303;
}
/* Food column styling */
.recommendations-column:last-child {
  background: linear-gradient(135deg, #cfd37e, #7bff2985);
  color: #7c0303;
}

.recommendations-divider {
    width: 2px;
    background: white;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.recommendations-column h2 {
    font-size: 1.3rem;
    font-weight: bold;
    margin-bottom: 1rem;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: #3e0707;
}

.recommendations-column ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.recommendations-column li {
    background: rgba(255, 255, 255, 0.15);
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    border-radius: 4px;
    backdrop-filter: blur(5px);
}

.recommendations-column li:last-child {
    margin-bottom: 0;
}

.recommendations-column li strong {
    display: block;
    margin-bottom: 0.25rem;
    font-size: 1.1rem;
}

.recommendations-column li br {
    line-height: 1.2;
}
</style>
            
                </script>
                <div class="carousel">
                    <div class="carousel-wrapper">
                        <div class="carousel-item active">
                            <h2>Health Metrics</h2>
                            <p>Track your progress over time.</p>
                            <canvas id="progress-chart"></canvas>
                          </div>
                        <div class="carousel-item">
                          <h2>Weekly Recommendations</h2>
                          <div class="recommendations-container">
                            <div class="recommendations-column">
                              <h2>Exercise Recommendations</h2>     
                              <ul>         
                                  <% exercises.forEach(exercise => { %>             
                                      <li>                 
                                          <strong><%= exercise.exercise_name %></strong><br>                 
                                          Duration: <%= exercise.duration %> <br>                 
                                          Calories Burned: <%= exercise.calories_burned %> kcal<br>             
                                      </li>         
                                  <% }) %>     
                              </ul>
                          </div>
                      
                          <div class="recommendations-divider"></div>
                      
                          <div class="recommendations-column">
                              <h2>Food Recommendations</h2>     
                              <ul>         
                                  <% foods.forEach(food => { %>             
                                      <li>                 
                                          <strong><%= food.food_name %></strong><br>                 
                                          Calories per serving: <%= food.calories_per_serving %> kcal<br>             
                                      </li>         
                                  <% }) %>     
                              </ul>
                          </div>
                        </div>
                      </div>
                        <div class="carousel-item">
                          <ul id="reminders">
                            <h2>Your Reminders</h2>
  <% if (!reminders || reminders.length === 0) { %>
    <p>No reminders yet. Start adding one to stay on track!</p>
  <% } else { %>
    <ul>
      <% reminders.forEach(reminder => { %>
        <li>
          <% if (reminder.completed) { %>
            <span class="completed">
              <%= reminder.text %> at <%= reminder.time %>
            </span>
          <% } else { %>
            <span>
              <%= reminder.text %> at <%= reminder.time %>
            </span>
          <% } %>
        </li>
      <% }) %>
    </ul>
  <% } %>
</ul>
                        </div>
                    </div>
                    <button class="carousel-btn prev"></button>
                    <button class="carousel-btn next"></button>
                </div>
                
            </div>
        </section>
        
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  $(document).ready(function () {
    // Initialize Slick Carousel
    $('.carousel-wrapper').slick({
      dots: true,
      infinite: true,
      speed: 300,
      slidesToShow: 1,
      adaptiveHeight: true,
      prevArrow: $('.prev'),
      nextArrow: $('.next'),
    });

    const username = "<%= username %>";

    // Fetch data and render chart
    fetch(`/api/metrics/${username}`)
      .then((response) => response.json())
      .then((data) => {
        renderChart(data);
      })
      .catch((error) => console.error('Error fetching metrics:', error));

    // Render Chart
    function renderChart(data) {
      const ctx = document.getElementById('progress-chart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.dates.map((date) => new Date(date).toLocaleDateString()),
          datasets: [
            {
              label: 'Weight (kg)',
              data: data.weight,
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 2,
            },
            {
              label: 'Steps',
              data: data.steps,
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 2,
            },
            {
              label: 'Heart Rate (bpm)',
              data: data.heartRate,
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
      aspectRatio: 2, // Reduce the aspect ratio to make the chart smaller
          scales: {
            x: { title: { display: true, text: 'Date' } },
            y: { title: { display: true, text: 'Value' } },
          },
        },
      });
    }
  });
</script>


        <section class="membership-info">
            <div class="container">
                <h2 class="why-join-heading">Why This is Beneficial </h2>
                <ul class="why-join-list">
                    <li><strong>All-in-One Health Platform:</strong> Track your health metrics, food intake, exercises, and reminders in one place.</li>
                    <li><strong>Personalized Insights:</strong> Receive tailored exercise recommendations and symptom-based health suggestions.</li>
                    <li><strong>Stay Motivated:</strong> Visualize your progress with easy-to-read graphs and daily snapshots.</li>
                    <li><strong>Build Healthy Habits:</strong> Set reminders to stay consistent with your wellness goals and routines.</li>
                </ul>                
            </div>
        </section>
    <!-- Testimonials Section -->
<section class="testimonials">
    <h2>What Our Members Are Saying</h2>

<!-- Reviews List -->
<div class="reviews-list">
    <% reviews.forEach(review => { %>
      <div class="testimonial" data-id="<%= review._id %>">
        <div class="review-header">
          <span>- <%= review.user.username %></span>
          <span class="review-timestamp" data-timestamp="<%= review.createdAt %>">
            (Submitted on <%= new Date(review.createdAt).toLocaleString() %>)
          </span>
         <!-- <% if (review.user._id.toString() === user._id.toString()) { %>
            <button class="delete-btn" data-id="<%= review._id %>">🗑️</button>
          <% } %>-->
        </div>
        <p><%= review.text %></p>
        <div class="review-actions">
          <button class="like-btn">👍 <%= review.likes %></button>
          <button class="dislike-btn">👎 <%= review.dislikes %></button>
        </div>
      </div>
    <% }) %>
  </div>
  
  
  
    <!-- Review Form -->
    <div id="review-form">
      <textarea id="new-review" placeholder="Write your review here..." ></textarea>
      <button id="submit-review">Submit</button>
    </div>
    <div id="reviews-container">
      <!-- Existing reviews will be here -->
    </div>
  
  </section>
    </main>
  
    <script>
      document.getElementById('review-form').addEventListener('submit', async (e) => {
  e.preventDefault(); // Prevent the default form submission

  const formData = new FormData(e.target);
  const data = Object.fromEntries(formData.entries()); // Convert form data to an object

  try {
    const response = await fetch('/reviews', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      const newReview = await response.json(); // Get the newly created review from the server
      appendReviewToDOM(newReview); // Dynamically add the review to the page
      e.target.reset(); // Reset the form fields
    } else {
      const errorText = await response.text();
      alert(`Error: ${errorText}`);
    }
  } catch (err) {
    console.error('Error submitting review:', err);
    alert('Something went wrong. Please try again later.');
  }
});

// Function to dynamically add the review to the DOM
function appendReviewToDOM(review) {
  const reviewContainer = document.getElementById('reviews-container'); // Replace with your reviews container ID

  const reviewElement = document.createElement('div');
  reviewElement.classList.add('testimonial');
  reviewElement.setAttribute('data-id', review._id);

  reviewElement.innerHTML = `
    <p>${review.content}</p>
    <span>By ${review.author}</span>
    <button class="like-btn">👍 ${review.likes}</button>
    <button class="dislike-btn">👎 ${review.dislikes}</button>
  `;

  // Add the new review to the top of the reviews list
  reviewContainer.prepend(reviewElement);

  // Reattach event listeners for like/dislike buttons
  reviewElement.querySelector('.like-btn').addEventListener('click', likeDislikeHandler);
  reviewElement.querySelector('.dislike-btn').addEventListener('click', likeDislikeHandler);
}

// Like/Dislike handler (reuse existing logic)
async function likeDislikeHandler(e) {
  const reviewElement = e.target.closest('.testimonial');
  const reviewId = reviewElement.getAttribute('data-id');
  const action = e.target.classList.contains('like-btn') ? 'like' : 'dislike';

  const response = await fetch(`/reviews/${reviewId}/${action}`, { method: 'POST' });
  if (response.ok) {
    const updatedReview = await response.json(); // Get the updated review data
    e.target.innerText = action === 'like' 
      ? `👍 ${updatedReview.likes}` 
      : `👎 ${updatedReview.dislikes}`;
  } else {
    const errorText = await response.text();
    alert(`Error: ${errorText}`);
  }
}

        document.getElementById('submit-review').addEventListener('click', async () => {
  const newReview = document.getElementById('new-review').value;
  if (!newReview.trim()) return alert("Review can't be empty.");

  const response = await fetch('/reviews', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ text: newReview })
  });

  if (response.ok) {
    const reviews = await response.json(); // Get the updated reviews
    const reviewsList = document.querySelector('.reviews-list');
    reviewsList.innerHTML = ''; // Clear the reviews list

    reviews.forEach(review => {
  const isOwner = review.user._id === user._id;
  const hasLiked = review.likedBy.includes(user._id);
  const hasDisliked = review.dislikedBy.includes(user._id);

  const reviewElement = document.createElement('div');
  reviewElement.classList.add('testimonial');
  reviewElement.setAttribute('data-id', review._id);
  reviewElement.innerHTML = `
    <div class="review-header">
      <span>${review.user.username}</span>
      <span class="review-timestamp" data-timestamp="${review.createdAt}">
         ${new Date(review.createdAt).toLocaleString()}
      </span>
      ${isOwner ? `<button class="delete-btn" data-id="${review._id}">🗑️</button>` : ''}
    </div>
    <p>${review.text}</p>
    <div class="review-actions">
      <button class="like-btn" ${isOwner || hasLiked ? 'disabled' : ''}>👍 ${review.likes}</button>
      <button class="dislike-btn" ${isOwner || hasDisliked ? 'disabled' : ''}>👎 ${review.dislikes}</button>
    </div>
  `;
  reviewsList.appendChild(reviewElement);
});


  }
});


// Like/Dislike review
// Like/Dislike review
document.querySelectorAll('.like-btn, .dislike-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const reviewElement = e.target.closest('.testimonial');
    const reviewId = reviewElement.getAttribute('data-id');
    const action = e.target.classList.contains('like-btn') ? 'like' : 'dislike';

    const response = await fetch(`/reviews/${reviewId}/${action}`, { method: 'POST' });
    if (response.ok) {
      const updatedReview = await response.json(); // Get the updated review data
      
      // Update like and dislike counts
      const likeButton = reviewElement.querySelector('.like-btn');
      const dislikeButton = reviewElement.querySelector('.dislike-btn');
      likeButton.innerText = `👍 ${updatedReview.likes}`;
      dislikeButton.innerText = `👎 ${updatedReview.dislikes}`;
    } else {
      const errorText = await response.text();
      alert(`Error: ${errorText}`);
    }
  });
});


// Delete review
document.querySelectorAll('.delete-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const reviewId = e.target.getAttribute('data-id');
    const confirmDelete = confirm('Are you sure you want to delete this review?');
    if (!confirmDelete) return;

    try {
      const response = await fetch(`/reviews/${reviewId}/delete`, { method: 'POST' });
      if (response.ok) {
        // Remove the review from the DOM
        e.target.closest('.testimonial').remove();
        alert('Review deleted successfully.');
      } else {
        const errorText = await response.text();
        alert(`Error deleting review: ${errorText}`);
      }
    } catch (err) {
      console.error('Error:', err);
      alert('Something went wrong. Please try again.');
    }
  });
});




    </script>
        
    </main>

    <footer>
        <div class="container">
            <p>&copy; 2024 MedSquire. All Rights Reserved.</p>
        </div>
    </footer>
</body>
</html>