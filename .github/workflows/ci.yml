name: Full CI - HealthOps MERN Stack

on:
  push:
    branches: 
      - main
      - cd-final   # ✅ Newly added branch
  pull_request:
    branches: 
      - main
      - cd-final   # ✅ PRs into this branch will also trigger the CI


jobs:
  install-audit:
    name: Install & Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Backend Dependencies
        run: npm install
        working-directory: ./server

      - name: 📦 Install Frontend Dependencies
        run: npm install
        working-directory: ./client

      - name: 🔒 Audit Backend
        run: npm audit --audit-level=moderate || true
        working-directory: ./server

      - name: 🔒 Audit Frontend
        run: npm audit --audit-level=moderate || true
        working-directory: ./client

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: install-audit

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PORT: ${{ secrets.PORT }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      MONGO_URI_TEST: ${{ secrets.MONGO_URI_TEST }}
      SESSION_SECRET: dummy-secret
      NODE_ENV: test

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Backend
        run: npm install
        working-directory: ./server

      - name: 📦 Install Frontend
        run: npm install
        working-directory: ./client

      - name: 🏗️ Build Frontend (Ignore Warnings)
        run: CI=false npm run build
        working-directory: ./client

      

      - name: 🔍 Run ESLint
        run: npm run lint
        working-directory: ./server

      - name: 🧪 Run Backend Integration Tests with Coverage
        run: node --experimental-vm-modules ./node_modules/jest/bin/jest.js tests --testEnvironment=node --testTimeout=10000 --coverage
        working-directory: ./server
      

      - name: 🐳 Build Docker Image
        run: docker build -t healthops-backend .
        working-directory: ./server

      - name: ✅ Confirm React Built
        run: test -f ./client/build/index.html

      - name: 🛡️ Run Snyk Test
        run: npx snyk test
        working-directory: ./server
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: 🚀 Serve & Audit with Lighthouse
        run: |
          npm install -g serve wait-on
          serve -s client/build -l 3000 &
          wait-on http://localhost:3000
        continue-on-error: true

      - name: 🌐 Lighthouse Performance Check
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: 'http://localhost:3000'
        continue-on-error: true


# Add a new job for monitoring test after build-test and before deploy

  monitoring:
    name: 📊 Prometheus & Grafana Monitoring Test
    runs-on: ubuntu-latest
    needs: build-test

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      GOOGLE_CLIENT_ID: dummy
      GOOGLE_CLIENT_SECRET: dummy
      GOOGLE_REDIRECT_URI: http://localhost:4000/oauth2callback
      PORT: 4000
      MONGO_URI: ${{ secrets.MONGO_URI_TEST }}
      SESSION_SECRET: dummy-secret
      NODE_ENV: test

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Backend
        run: npm install
        working-directory: ./server

      - name: 🚀 Start Backend with Prometheus Metrics in background
        run: |
          node server/server.js &
          echo $! > backend_pid.txt
          sleep 10  # Wait for server to start

      - name: 📥 Download and Start Prometheus
        run: |
          curl -LO https://github.com/prometheus/prometheus/releases/download/v2.48.0/prometheus-2.48.0.linux-amd64.tar.gz
          tar xvf prometheus-2.48.0.linux-amd64.tar.gz
          cd prometheus-2.48.0.linux-amd64
          echo "
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'healthops-backend'
              static_configs:
                - targets: ['localhost:4000']
          " > prometheus.yml
          ./prometheus --config.file=prometheus.yml &
          echo $! > ../prometheus_pid.txt
          sleep 15

      - name: 🔍 Check Prometheus metrics endpoint
        run: curl -s http://localhost:4000/metrics | head -n 20

      - name: 🛑 Kill backend and Prometheus servers
        run: |
          kill $(cat backend_pid.txt) || echo "Backend already stopped"
          kill $(cat prometheus_pid.txt) || echo "Prometheus already stopped"


  

  deploy:
    name: 🚀 Deploy to Firebase
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Firebase CLI
        run: npm install -g firebase-tools

      - name: 🔧 Build React App
        run: |
          cd client
          npm install
          CI=false npm run build

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel

      - name: 🚀 Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd client
          vercel --prod --token $VERCEL_TOKEN --confirm

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ☁️ Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 🐳 Build & Push Docker Image to Google Container Registry
        run: |
          gcloud builds submit ./server --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/healthops-backend

      - name: 🚀 Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.GCP_SERVICE_NAME }} \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/healthops-backend \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated

